{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"C:\\\\Users\\\\hyose\\\\Documents\\\\redux_typescript\\\\pages\\\\index.tsx\";\nvar __jsx = React.createElement;\n// import React from 'react';\n// import axios from 'axios';\n// import NoticeContainers from \"../containers/NoticeContainers\";\n//\n// const Index = ({lists}) => {\n//\n//     return (\n//         <>\n//             <NoticeContainers props={lists}/>\n//         </>\n//     )\n// };\nimport React from 'react';\nimport axios from 'axios';\nimport NoticeContainers from '../containers/NoticeContainers'; // 배열이 가지는 항목의 값의 타입을 단언할 수 없다면 any를 사용\n\nfunction Index(_ref) {\n  var lists = _ref.lists;\n  // return (\n  //     <>\n  //         {lists && lists.map(list => (\n  //             <li key={list.NTC_ID} >{list.NTC_TITLE}</li>\n  //         ))}\n  //     </>\n  // )\n  return __jsx(React.Fragment, null, __jsx(NoticeContainers, {\n    props: lists,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }\n  }));\n}\n\n_c = Index;\nIndex.getInitialProps = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n  var response;\n  return _regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return axios.get('http://15.165.161.162:8086/api/web/notice/NoticeList?PAGE=1');\n\n        case 2:\n          response = _context.sent;\n          return _context.abrupt(\"return\", {\n            lists: response.data.data[0].list\n          });\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee);\n}));\nexport default Index;\n\nvar _c;\n\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"sources":["C:/Users/hyose/Documents/redux_typescript/pages/index.tsx"],"names":["React","axios","NoticeContainers","Index","lists","getInitialProps","get","response","data","list"],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,gBAAP,MAA6B,gCAA7B,C,CAEA;;AAKA,SAASC,KAAT,OAAiC;AAAA,MAAhBC,KAAgB,QAAhBA,KAAgB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SACI,4BACI,MAAC,gBAAD;AAAkB,IAAA,KAAK,EAAEA,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAMH;;KAdQD,K;AAeTA,KAAK,CAACE,eAAN,yEAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACGJ,KAAK,CAACK,GAAN,CAAU,6DAAV,CADH;;AAAA;AACdC,UAAAA,QADc;AAAA,2CAEb;AACHH,YAAAA,KAAK,EAAGG,QAAQ,CAACC,IAAT,CAAcA,IAAd,CAAmB,CAAnB,EAAsBC;AAD3B,WAFa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB;AAQA,eAAeN,KAAf","sourcesContent":["// import React from 'react';\r\n// import axios from 'axios';\r\n// import NoticeContainers from \"../containers/NoticeContainers\";\r\n//\r\n// const Index = ({lists}) => {\r\n//\r\n//     return (\r\n//         <>\r\n//             <NoticeContainers props={lists}/>\r\n//         </>\r\n//     )\r\n// };\r\n\r\n\r\nimport React from 'react'\r\nimport axios from 'axios';\r\nimport NoticeContainers from '../containers/NoticeContainers'\r\n\r\n// 배열이 가지는 항목의 값의 타입을 단언할 수 없다면 any를 사용\r\ntype Props = {\r\n    lists: any[]\r\n}\r\n\r\nfunction Index({ lists }: Props) {\r\n    // return (\r\n    //     <>\r\n    //         {lists && lists.map(list => (\r\n    //             <li key={list.NTC_ID} >{list.NTC_TITLE}</li>\r\n    //         ))}\r\n    //     </>\r\n    // )\r\n    return (\r\n        <>\r\n            <NoticeContainers props={lists}/>\r\n        </>\r\n    )\r\n\r\n}\r\nIndex.getInitialProps = async function() {\r\n    const response = await axios.get('http://15.165.161.162:8086/api/web/notice/NoticeList?PAGE=1');\r\n    return {\r\n        lists : response.data.data[0].list\r\n    }\r\n}\r\n\r\n\r\nexport default Index"]},"metadata":{},"sourceType":"module"}