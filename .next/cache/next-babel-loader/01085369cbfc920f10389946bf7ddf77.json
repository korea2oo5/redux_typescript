{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { HYDRATE, createWrapper } from 'next-redux-wrapper';\nimport thunkMiddleware from 'redux-thunk'; // 액션 & 리듀서가 추가될때마다 설정\n\nimport notice from './notice'; // 미들웨어는 액션이 dispatch 되어서 리듀서에서 이를 처리하기전에 사전에 지정된 작업들을 설정\n// 액션과 리듀서 사이의 중간자\n// 미들웨어 설정\n// composeWithDevTools - 리덕스 툴\n// redux-thunk 비동기 작업 처리할 때 가장 기본적으로 사용하는 미들웨어\n// thunk - 특정 작업을 나중에 하도록 미루기 위해서 함수형태로 감싼 것을 칭함\n\nconst bindMiddleware = middleware => {\n  if (true) {\n    const {\n      composeWithDevTools\n    } = require('redux-devtools-extension');\n\n    return composeWithDevTools(applyMiddleware(...middleware));\n  }\n\n  return applyMiddleware(...middleware);\n}; // 액션 & 리듀서 추가하는 곳(하나의 리듀서로 통합하기 위한 작업)\n\n\nconst rootReducer = combineReducers({\n  notice\n});\nexport default rootReducer;\n\n// TODO 알아보기\nconst reducer = (state, action) => {\n  if (action.type === HYDRATE) {\n    const nextState = _objectSpread(_objectSpread({}, state), action.payload);\n\n    if (state.data) nextState.data = state.data;\n    return nextState;\n  } else {\n    return rootReducer(state, action);\n  }\n};\n\nconst initStore = () => {\n  // 여러 reducer를 combineReducers에 하나로 통합해서 담고 또 그것을 createStore에 전달해준다.\n  return createStore(reducer, bindMiddleware([thunkMiddleware]));\n};\n\nexport const wrapper = createWrapper(initStore);","map":{"version":3,"sources":["C:/Users/hyose/Documents/redux_typescript/modules/index.tsx"],"names":["createStore","applyMiddleware","combineReducers","HYDRATE","createWrapper","thunkMiddleware","notice","bindMiddleware","middleware","composeWithDevTools","require","rootReducer","reducer","state","action","type","nextState","payload","data","initStore","wrapper"],"mappings":";;;;;;AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,SAASC,OAAT,EAAkBC,aAAlB,QAAuC,oBAAvC;AACA,OAAOC,eAAP,MAA4B,aAA5B,C,CACA;;AACA,OAAOC,MAAP,MAAmB,UAAnB,C,CAEA;AACA;AAEA;AACA;AACA;AACA;;AACA,MAAMC,cAAc,GAAIC,UAAD,IAAgB;AACnC,YAA2C;AACvC,UAAM;AAAEC,MAAAA;AAAF,QAA0BC,OAAO,CAAC,0BAAD,CAAvC;;AACA,WAAOD,mBAAmB,CAACR,eAAe,CAAC,GAAGO,UAAJ,CAAhB,CAA1B;AACH;;AACD,SAAOP,eAAe,CAAC,GAAGO,UAAJ,CAAtB;AACH,CAND,C,CAOA;;;AACA,MAAMG,WAAW,GAAGT,eAAe,CAAC;AAChCI,EAAAA;AADgC,CAAD,CAAnC;AAIA,eAAeK,WAAf;;AAIA;AACA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC/B,MAAIA,MAAM,CAACC,IAAP,KAAgBZ,OAApB,EAA6B;AACzB,UAAMa,SAAS,mCACRH,KADQ,GAERC,MAAM,CAACG,OAFC,CAAf;;AAIA,QAAIJ,KAAK,CAACK,IAAV,EAAgBF,SAAS,CAACE,IAAV,GAAiBL,KAAK,CAACK,IAAvB;AAChB,WAAOF,SAAP;AACH,GAPD,MAOO;AACH,WAAOL,WAAW,CAACE,KAAD,EAAQC,MAAR,CAAlB;AACH;AACJ,CAXD;;AAaA,MAAMK,SAAS,GAAG,MAAM;AACpB;AACA,SAAOnB,WAAW,CAACY,OAAD,EAAUL,cAAc,CAAC,CAACF,eAAD,CAAD,CAAxB,CAAlB;AACH,CAHD;;AAKA,OAAO,MAAMe,OAAO,GAAGhB,aAAa,CAACe,SAAD,CAA7B","sourcesContent":["import { createStore, applyMiddleware, combineReducers } from 'redux'\r\nimport { HYDRATE, createWrapper } from 'next-redux-wrapper'\r\nimport thunkMiddleware from 'redux-thunk'\r\n// 액션 & 리듀서가 추가될때마다 설정\r\nimport notice from './notice'\r\n\r\n// 미들웨어는 액션이 dispatch 되어서 리듀서에서 이를 처리하기전에 사전에 지정된 작업들을 설정\r\n// 액션과 리듀서 사이의 중간자\r\n\r\n// 미들웨어 설정\r\n// composeWithDevTools - 리덕스 툴\r\n// redux-thunk 비동기 작업 처리할 때 가장 기본적으로 사용하는 미들웨어\r\n// thunk - 특정 작업을 나중에 하도록 미루기 위해서 함수형태로 감싼 것을 칭함\r\nconst bindMiddleware = (middleware) => {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        const { composeWithDevTools } = require('redux-devtools-extension')\r\n        return composeWithDevTools(applyMiddleware(...middleware))\r\n    }\r\n    return applyMiddleware(...middleware)\r\n};\r\n// 액션 & 리듀서 추가하는 곳(하나의 리듀서로 통합하기 위한 작업)\r\nconst rootReducer = combineReducers({\r\n    notice\r\n});\r\n\r\nexport default rootReducer\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>\r\n\r\n// TODO 알아보기\r\nconst reducer = (state, action) => {\r\n    if (action.type === HYDRATE) {\r\n        const nextState = {\r\n            ...state, // use previous state\r\n            ...action.payload, // apply delta from hydration\r\n        };\r\n        if (state.data) nextState.data = state.data\r\n        return nextState\r\n    } else {\r\n        return rootReducer(state, action)\r\n    }\r\n};\r\n\r\nconst initStore = () => {\r\n    // 여러 reducer를 combineReducers에 하나로 통합해서 담고 또 그것을 createStore에 전달해준다.\r\n    return createStore(reducer, bindMiddleware([thunkMiddleware]))\r\n};\r\n\r\nexport const wrapper = createWrapper(initStore)"]},"metadata":{},"sourceType":"module"}