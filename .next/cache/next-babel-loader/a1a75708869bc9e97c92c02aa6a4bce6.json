{"ast":null,"code":"// import { createStore, applyMiddleware, combineReducers } from 'redux'\n// import { HYDRATE, createWrapper } from 'next-redux-wrapper'\n// import thunkMiddleware from 'redux-thunk'\n// // 액션 & 리듀서가 추가될때마다 설정\n//\n// // 미들웨어는 액션이 dispatch 되어서 리듀서에서 이를 처리하기전에 사전에 지정된 작업들을 설정\n// // 액션과 리듀서 사이의 중간자\n//\n// // 미들웨어 설정\n// // composeWithDevTools - 리덕스 툴\n// // redux-thunk 비동기 작업 처리할 때 가장 기본적으로 사용하는 미들웨어\n// // thunk - 특정 작업을 나중에 하도록 미루기 위해서 함수형태로 감싼 것을 칭함\n// const bindMiddleware = (middleware) => {\n//     if (process.env.NODE_ENV !== 'production') {\n//         const { composeWithDevTools } = require('redux-devtools-extension')\n//         return composeWithDevTools(applyMiddleware(...middleware))\n//     }\n//     return applyMiddleware(...middleware)\n// };\n// // 액션 & 리듀서 추가하는 곳(하나의 리듀서로 통합하기 위한 작업)\n// const combinedReducer = combineReducers({\n//\n// });\n// // TODO 알아보기\n// const reducer = (state, action) => {\n//     if (action.type === HYDRATE) {\n//         const nextState = {\n//             ...state, // use previous state\n//             ...action.payload, // apply delta from hydration\n//         };\n//         if (state.data) nextState.data = state.data\n//         return nextState\n//     } else {\n//         return combinedReducer(state, action)\n//     }\n// };\n//\n// const initStore = () => {\n//     // 여러 reducer를 combineReducers에 하나로 통합해서 담고 또 그것을 createStore에 전달해준다.\n//     return createStore(reducer, bindMiddleware([thunkMiddleware]))\n// };\n//\n// export const wrapper = createWrapper(initStore)","map":{"version":3,"sources":["C:/Users/hyose/Documents/redux_typescript/modules/index.tsx"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// import { createStore, applyMiddleware, combineReducers } from 'redux'\r\n// import { HYDRATE, createWrapper } from 'next-redux-wrapper'\r\n// import thunkMiddleware from 'redux-thunk'\r\n// // 액션 & 리듀서가 추가될때마다 설정\r\n//\r\n// // 미들웨어는 액션이 dispatch 되어서 리듀서에서 이를 처리하기전에 사전에 지정된 작업들을 설정\r\n// // 액션과 리듀서 사이의 중간자\r\n//\r\n// // 미들웨어 설정\r\n// // composeWithDevTools - 리덕스 툴\r\n// // redux-thunk 비동기 작업 처리할 때 가장 기본적으로 사용하는 미들웨어\r\n// // thunk - 특정 작업을 나중에 하도록 미루기 위해서 함수형태로 감싼 것을 칭함\r\n// const bindMiddleware = (middleware) => {\r\n//     if (process.env.NODE_ENV !== 'production') {\r\n//         const { composeWithDevTools } = require('redux-devtools-extension')\r\n//         return composeWithDevTools(applyMiddleware(...middleware))\r\n//     }\r\n//     return applyMiddleware(...middleware)\r\n// };\r\n// // 액션 & 리듀서 추가하는 곳(하나의 리듀서로 통합하기 위한 작업)\r\n// const combinedReducer = combineReducers({\r\n//\r\n// });\r\n// // TODO 알아보기\r\n// const reducer = (state, action) => {\r\n//     if (action.type === HYDRATE) {\r\n//         const nextState = {\r\n//             ...state, // use previous state\r\n//             ...action.payload, // apply delta from hydration\r\n//         };\r\n//         if (state.data) nextState.data = state.data\r\n//         return nextState\r\n//     } else {\r\n//         return combinedReducer(state, action)\r\n//     }\r\n// };\r\n//\r\n// const initStore = () => {\r\n//     // 여러 reducer를 combineReducers에 하나로 통합해서 담고 또 그것을 createStore에 전달해준다.\r\n//     return createStore(reducer, bindMiddleware([thunkMiddleware]))\r\n// };\r\n//\r\n// export const wrapper = createWrapper(initStore)"]},"metadata":{},"sourceType":"script"}